group = 'org.xbib.elasticsearch.plugin'
version = '2.4.5.0'

ext {
    pluginName = 'bundle'
    pluginClassname  = 'org.xbib.elasticsearch.plugin.bundle.BundlePlugin'
    projectDescription = 'A bundle of plugins for Elasticsearch'
    user = 'jprante'
    name = 'elasticsearch-plugin-bundle'
    scmUrl = 'https://github.com/' + user + '/' + name
    scmConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    scmDeveloperConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    versions = [
        'elasticsearch' : '2.4.5',
        'lucene' : '5.5.4',
        'jackson': '2.8.1',
        'log4j': '2.5',
        'junit' : '4.12'
    ]
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "http://xbib.org/repository"
        }
    }
    dependencies {
        classpath 'org.xbib.gradle.plugin:gradle-plugin-jflex:1.1.0'
        classpath 'co.riiid:gradle-github-plugin:0.4.2'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'org.xbib.gradle.plugin.jflex'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven {
        url "http://xbib.org/repository"
    }
}

configurations {
    wagon
    releaseJars {
        extendsFrom runtime
        exclude group: 'org.elasticsearch'
        exclude module: 'lucene-core'
        exclude module: 'lucene-analyzers-common'
        exclude module: 'jna'
        exclude module: 'jackson-core'
        exclude module: 'jackson-dataformat-smile'
        exclude module: 'jackson-dataformat-yaml'
        exclude module: 'jflex'
    }
}

dependencies {
    compile "org.elasticsearch:elasticsearch:${versions.elasticsearch}"
    // override Lucene's old ICU 53
    compile "com.ibm.icu:icu4j:57.1"
    compile "org.apache.lucene:lucene-analyzers-icu:${versions.lucene}"
    compile "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    testCompile "junit:junit:${versions.junit}"
    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}"
    testCompile "org.apache.logging.log4j:log4j-core:${versions.log4j}"
    releaseJars "${project.group}:${project.name}:${project.version}"
    wagon 'org.apache.maven.wagon:wagon-ssh-external:2.10'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked,deprecation"
}

test {
    //include '**/CustomTokenizerTest*'
    systemProperties['path.home'] = System.getProperty("user.dir")
    testLogging {
        showStandardStreams = false
        exceptionFormat = 'full'
    }
}

task makePluginDescriptor(type: Copy) {
    from 'src/main/templates'
    into 'build/tmp/plugin'
    expand([
            'descriptor': [
                'name': pluginName,
                'classname': pluginClassname,
                'description': projectDescription,
                'jvm': true,
                'site': false,
                'isolated': true,
                'version': project.property('version'),
                'javaVersion': project.property('targetCompatibility'),
                'elasticsearchVersion' : versions.elasticsearch
            ]
    ])
}

task buildPluginZip(type: Zip, dependsOn: [':jar', ':makePluginDescriptor']) {
    from configurations.releaseJars
    from 'build/tmp/plugin'
    classifier = 'plugin'
}

task unpackPlugin(type: Copy, dependsOn: [':buildPluginZip']) {
    delete "plugins"
    from configurations.releaseJars
    from 'build/tmp/plugin'
    into "plugins/${pluginName}"
}

clean {
    delete "plugins"
    delete "data"
    delete "logs"
}

task javadocJar(type: Jar, dependsOn: classes) {
    from javadoc
    into 'build/tmp'
    classifier 'javadoc'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    into 'build/tmp'
    classifier 'sources'
}

artifacts {
    archives javadocJar, sourcesJar, buildPluginZip
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

apply from: 'gradle/publish.gradle'
