
plugins {
    id "org.sonarqube" version "2.6.1"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.5.4.1.0"
    id "org.xbib.gradle.plugin.jflex" version "1.1.0"
    id "io.codearte.nexus-staging" version "0.7.0"
}

printf "Host: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGroovy: %s\nGradle: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        GroovySystem.getVersion(),
        gradle.gradleVersion


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: "jacoco"
apply plugin: 'org.xbib.gradle.plugin.jflex'
apply plugin: 'org.xbib.gradle.plugin.asciidoctor'

repositories {
    mavenCentral()
}

configurations {
    wagon
    distJars {
        extendsFrom runtime
        exclude group: 'org.elasticsearch'
        exclude module: 'lucene-core'
        exclude module: 'lucene-analyzers-common'
        exclude module: 'jna'
        exclude module: 'jackson-core'
        exclude module: 'jackson-dataformat-smile'
        exclude module: 'jackson-dataformat-yaml'
        exclude module: 'jflex'
    }
}

apply from: 'gradle/ext.gradle'
apply from: 'gradle/publish.gradle'

dependencies {
    compile "org.elasticsearch:elasticsearch:${project.property('elasticsearch.version')}"
    compile "com.ibm.icu:icu4j:${project.property('icu4j.version')}"
    compile "org.xbib:standardnumber:${project.property('standardnumber.version')}"
    compileOnly "org.apache.logging.log4j:log4j-core:${project.property('log4j.version')}"
    testCompile "junit:junit:${project.property('junit.version')}"
    testCompile "org.apache.logging.log4j:log4j-core:${project.property('log4j.version')}"
    testCompile "org.elasticsearch.plugin:transport-netty4-client:${project.property('elasticsearch.version')}"
    distJars "${project.group}:${project.name}:${project.version}"
    wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon.version')}"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-profile" << "compact2"
}

test {
    systemProperties['path.home'] = System.getProperty("user.dir")
    testLogging {
        showStandardStreams = false
        exceptionFormat = 'full'
    }
}

task makePluginDescriptor(type: Copy) {
    from 'src/main/templates'
    into 'build/tmp/plugin'
    expand([
            'descriptor': [
                'name': pluginName,
                'classname': pluginClassname,
                'description': pluginDescription,
                'version': project.property('version'),
                'javaVersion': project.property('targetCompatibility'),
                'elasticsearchVersion' : project.property('elasticsearch.version')
            ]
    ])
}

task buildPluginZip(type: Zip, dependsOn: [':jar', ':makePluginDescriptor']) {
    from configurations.distJars
    from 'build/tmp/plugin'
    into 'elasticsearch'
    classifier = 'plugin'
}

task unpackPlugin(type: Copy, dependsOn: [':buildPluginZip']) {
    delete "plugins"
    from configurations.distJars
    from 'build/tmp/plugin'
    into "plugins/${pluginName}"
}

clean {
    delete "plugins"
    delete "data"
    delete "logs"
}

asciidoctor {
    backends 'html5'
    separateOutputDirs = false
    attributes 'source-highlighter': 'coderay',
            toc                 : '',
            idprefix            : '',
            idseparator         : '-',
            stylesheet: "${projectDir}/src/docs/asciidoc/css/foundation.css"
}

task javadocJar(type: Jar, dependsOn: classes) {
    from javadoc
    into 'build/tmp'
    classifier 'javadoc'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    into 'build/tmp'
    classifier 'sources'
}

artifacts {
    archives javadocJar, sourcesJar, buildPluginZip
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}
